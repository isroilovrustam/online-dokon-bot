import re
import aiohttp
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards.default.phone_button import phone_btn_ru, phone_btn_uz, lang_btn
from keyboards.inline.sms_inline_button import sms_inline_btn_uz, sms_inline_btn_ru
from loader import dp
from data.config import API_URL
from states.register import RegisterState


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    # ‚úÖ START ARGUMENT (shop_xxx) orqali do‚Äòkon kodini olish
    args = message.get_args()
    if args.startswith("shop_"):
        shop_code = args.replace("shop_", "")
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/shop/by-code/{shop_code}/") as shop_resp:
                if shop_resp.status == 200:
                    await session.post(f"{API_URL}/botuser/set-active-shop/", json={
                        "telegram_id": str(message.from_user.id),
                        "shop_code": shop_code
                    })
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/botuser/{message.from_user.id}/") as resp:
            if resp.status == 200:
                user_data = await resp.json()
                language = user_data.get("language", "uz")
                welcome_text = (
                    f"üëã Salom, {message.from_user.full_name}!\n\n"
                    if language == "uz" else
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
                )
                await message.answer(welcome_text, parse_mode="Markdown")
                await state.finish()
            else:
                await message.answer("üåê Iltimos, o'zingizga qulay tilni tanlang.\n\nüá∫üáø O'zbekcha yoki üá∑üá∫ –†—É—Å—Å–∫–∏–π",
                                     reply_markup=lang_btn)
                await RegisterState.waiting_for_language.set()


@dp.message_handler(state=RegisterState.waiting_for_language)
async def choose_language(message: types.Message, state: FSMContext):
    # Tilni tanlash va telefon raqamini yuborish
    lang = message.text
    if lang == "üá∫üáø O'zbekcha":
        await state.update_data(language="uz")
        await message.answer("üìû Telefon raqamingizni yuboring.\n\nüëá Tugmani bosing va raqamingizni ulashing:",
                             reply_markup=phone_btn_uz)
    elif lang == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        await state.update_data(language="ru")
        await message.answer(
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\nüëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º:",
            reply_markup=phone_btn_ru)
    else:
        return
    await message.delete()
    await RegisterState.waiting_for_phone.set()


# Tasdiqlash kodi yuborish
@dp.message_handler(content_types=[types.ContentType.CONTACT, types.ContentType.TEXT],
                    state=RegisterState.waiting_for_phone)
async def get_phone(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "uz")  # Tilni olish

    # Telefon raqamni aniqlash
    if message.contact and message.contact.user_id == message.from_user.id:
        phone_number = message.contact.phone_number
    elif message.text and re.fullmatch(r'^\+998\d{9}$', message.text.strip()):
        phone_number = message.text.strip()
    else:
        await message.answer(
            "üìµ Iltimos, +998 bilan boshlanadigan telefon raqamingizni yozing yoki tugmadan foydalaning." if language == "uz" else
            "üìµ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å +998, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        return

    # Backendga yuborish
    async with aiohttp.ClientSession() as session:
        async with session.post(
                f"{API_URL}/botuser/register/",
                json={"phone_number": phone_number, "telegram_id": message.from_user.id}
        ) as resp:
            if resp.status == 201:
                await state.update_data(phone_number=phone_number)  # Telefon raqamini saqlash
                await message.answer(
                    "‚úÖ Telefon raqamingiz qabul qilindi." if language == "uz" else "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç.",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                confirm_text = (
                    "üì© 4 xonali tasdiqlash kodi olish uchun quyidagi \n<b>üì≤Kod olish</b> tugmasini bosing." if language == "uz"
                    else "üì© –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n<b>üì≤–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥</b> –Ω–∏–∂–µ."
                )
                await message.answer(confirm_text,
                                     reply_markup=sms_inline_btn_uz if language == "uz" else sms_inline_btn_ru)
                await RegisterState.waiting_for_code.set()
            else:
                await message.answer(
                    "‚ùå Telefon raqamini qabul qilib bo‚Äòlmadi. Iltimos, qaytadan urinib ko‚Äòring." if language == "uz" else
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )


@dp.message_handler(lambda msg: msg.text.isdigit() and len(msg.text) == 4, state=RegisterState.waiting_for_code)
async def verify_code(message: types.Message, state: FSMContext):
    code = message.text
    user = message.from_user
    user_data = await state.get_data()
    phone_number = user_data.get("phone_number")
    language = user_data.get("language", "uz")

    if not phone_number:
        await message.answer(
            "‚ö†Ô∏è Iltimos, avval telefon raqamingizni yuboring." if language == "uz" else
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )
        return

    payload = {
        "phone_number": phone_number,
        "code": code,
        "telegram_id": user.id,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "telegram_username": user.username,
        "language": language,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/botuser/verify_code/", json=payload) as resp:
            data = await resp.json()
            if resp.status == 200:
                await message.answer(
                    "üéâ Tabriklaymiz! Siz muvaffaqiyatli ro‚Äòyxatdan o‚Äòtdingiz!" if language == "uz" else
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
                )
                await state.finish()
            elif resp.status == 400 and "expired" in data.get("detail", "").lower():
                await message.answer(
                    "‚è≥ Kod eskirgan. Yangi kod yuborildi, uni kiriting." if language == "uz" else
                    "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ."
                )
            else:
                await message.answer(
                    "‚ùå Kod noto‚Äòg‚Äòri. Iltimos, qayta urinib ko‚Äòring." if language == "uz" else
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
